<options>
	<profile n="colorcoding_profiles.Idris" version="2">
		<p n="idchars" v="a-zA-Z_$ 0-9'"/>
		<p n="case_sensitive" v="1"/>
		<p n="mn_flags" v="digit_float digit_int dot_float"/>
		<p n="comment,|||"><attrs color_to_eol="comment"/></p>
		<p n="comment,--"><attrs color_to_eol="comment"/></p>
		<p n="comment,{-"><attrs end="-}" flags="multiline"/></p>
		<p n="function,^:v(#= *\:)"><attrs start_col="1" flags="regex"/></p>
		<p n="inherit" v="(None)"/>
		<p n="k,auto"/>
		<p n="k,case"/>
		<p n="k,Char"/>
		<p n="k,constructor"/>
		<p n="k,data"/>
		<p n="k,do"/>
		<p n="k,else"/>
		<p n="k,export"/>
		<p n="k,if"/>
		<p n="k,import"/>
		<p n="k,in"/>
		<p n="k,infix"/>
		<p n="k,infixl"/>
		<p n="k,infixr"/>
		<p n="k,Int"/>
		<p n="k,Integer"/>
		<p n="k,impossible"/>
		<p n="k,let"/>
		<p n="k,module"/>
		<p n="k,mutual"/>
		<p n="k,namespace"/>
		<p n="k,of"/>
		<p n="k,private"/>
		<p n="k,public"/>
		<p n="k,record"/>
		<p n="k,rewrite"/>
		<p n="k,String"/>
		<p n="k,then"/>
		<p n="k,Type"/>
		<p n="k,where"/>
		<p n="k,with"/>
		<p n="lib,absurd"/>
		<p n="lib,all"/>
		<p n="lib,Append"/>
		<p n="lib,Bool"/>
		<p n="lib,Cast"/>
		<p n="lib,cast"/>
		<p n="lib,Char"/>
		<p n="lib,closeFile"/>
		<p n="lib,Data"/>
		<p n="lib,Dec"/>
		<p n="lib,DecEq"/>
		<p n="lib,decEq"/>
		<p n="lib,Delay"/>
		<p n="lib,DivBy"/>
		<p n="lib,DivByZero"/>
		<p n="lib,Divides"/>
		<p n="lib,divides"/>
		<p n="lib,Either"/>
		<p n="lib,Eq"/>
		<p n="lib,EqNat"/>
		<p n="lib,exactLength"/>
		<p n="lib,False"/>
		<p n="lib,fEOF"/>
		<p n="lib,fGetLine"/>
		<p n="lib,File"/>
		<p n="lib,FileError"/>
		<p n="lib,FileNotFound"/>
		<p n="lib,FileReadError"/>
		<p n="lib,FileWriteError"/>
		<p n="lib,Fin"/>
		<p n="lib,fEOF"/>
		<p n="lib,Force"/>
		<p n="lib,Functor"/>
		<p n="lib,GenericFileError"/>
		<p n="lib,getLine"/>
		<p n="lib,Inf"/>
		<p n="lib,IO"/>
		<p n="lib,isDigit"/>
		<p n="lib,iterate"/>
		<p n="lib,Just"/>
		<p n="lib,Left"/>
		<p n="lib,List"/>
		<p n="lib,map"/>
		<p n="lib,Maybe"/>
		<p n="lib,Mode"/>
		<p n="lib,Monad"/>
		<p n="lib,Nat"/>
		<p n="lib,Nil"/>
		<p n="lib,No"/>
		<p n="lib,not"/>
		<p n="lib,Nothing"/>
		<p n="lib,openFile"/>
		<p n="lib,Ord"/>
		<p n="lib,PermissionDenied"/>
		<p n="lib,Prelude"/>
		<p n="lib,printLn"/>
		<p n="lib,pure"/>
		<p n="lib,putChar"/>
		<p n="lib,putCharLn"/>
		<p n="lib,putStr"/>
		<p n="lib,putStrLn"/>
		<p n="lib,Read"/>
		<p n="lib,ReadAppend"/>
		<p n="lib,ReadWrite"/>
		<p n="lib,ReadWriteTruncate"/>
		<p n="lib,Refl"/>
		<p n="lib,readFile"/>
		<p n="lib,repl"/>
		<p n="lib,replWith"/>
		<p n="lib,Right"/>
		<p n="lib,S"/>
		<p n="lib,shiftL"/>
		<p n="lib,shiftR"/>
		<p n="lib,show"/>
		<p n="lib,Show"/>
		<p n="lib,Stream"/>
		<p n="lib,sym"/>
		<p n="lib,take"/>
		<p n="lib,trim"/>
		<p n="lib,True"/>
		<p n="lib,unpack"/>
		<p n="lib,Vect"/>
		<p n="lib,Void"/>
		<p n="lib,writeFile"/>
		<p n="lib,WriteTruncate"/>
		<p n="lib,Yes"/>
		<p n="lib,Z"/>
		<p n="lib,Yes"/>
		<p n="op,=="/>
		<p n="op,-"/>
		<p n="op,::"/>
		<p n="op,/"/>
		<p n="op,*"/>
		<p n="op,+"/>
		<p n="op,-&gt;"/>
		<p n="op,&gt;="/>
		<p n="op,&gt;"/>
		<p n="op,&gt;&gt;="/>
		<p n="op,&lt;="/>
		<p n="op,&lt;-"/>
		<p n="op,&lt;"/>
		<p n="pp,^%:v"><attrs start_col="1" flags="regex"/></p>
		<p n="pu,="/>
		<p n="pu,|"/>
		<p n="pu,,"/>
		<p n="pu,:"/>
		<p n="pu,?"/>
		<p n="pu,("/>
		<p n="pu,)"/>
		<p n="pu,["/>
		<p n="pu,]"/>
		<p n="pu,{"/>
		<p n="pu,}"/>
		<p n="pu,\"/>
		<p n="pu,$"/>
		<p n='string,"'><attrs end='"' flags="multiline"/></p>
		<p n="string,'"><attrs end="'" flags="terminate"/></p>
	</profile>
</options>
